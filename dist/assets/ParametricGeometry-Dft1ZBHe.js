import{BufferGeometry as A,Vector3 as h,Float32BufferAttribute as V}from"three";class G extends A{constructor(o=(c,a,b)=>b.set(c,a,Math.cos(c)*Math.sin(a)),p=8,m=8){super(),this.type="ParametricGeometry",this.parameters={func:o,slices:p,stacks:m};const c=[],a=[],b=[],x=[],i=1e-5,l=new h,r=new h,n=new h,y=new h,f=new h,w=p+1;for(let e=0;e<=m;e++){const t=e/m;for(let u=0;u<=p;u++){const s=u/p;o(s,t,r),a.push(r.x,r.y,r.z),s-i>=0?(o(s-i,t,n),y.subVectors(r,n)):(o(s+i,t,n),y.subVectors(n,r)),t-i>=0?(o(s,t-i,n),f.subVectors(r,n)):(o(s,t+i,n),f.subVectors(n,r)),l.crossVectors(y,f).normalize(),b.push(l.x,l.y,l.z),x.push(s,t)}}for(let e=0;e<m;e++)for(let t=0;t<p;t++){const u=e*w+t,s=e*w+t+1,v=(e+1)*w+t+1,d=(e+1)*w+t;c.push(u,s,d),c.push(s,v,d)}this.setIndex(c),this.setAttribute("position",new V(a,3)),this.setAttribute("normal",new V(b,3)),this.setAttribute("uv",new V(x,2))}copy(o){return super.copy(o),this.parameters=Object.assign({},o.parameters),this}}export{G as ParametricGeometry};
